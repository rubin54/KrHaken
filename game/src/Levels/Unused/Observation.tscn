[gd_scene load_steps=16 format=2]

[ext_resource path="res://assets/tilesets/PropsSet.tres" type="TileSet" id=1]
[ext_resource path="res://BasicMap.tres" type="TileSet" id=2]
[ext_resource path="res://src/Player/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Shader/Water_shader/water_shader.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/UI/UI_Scenes/UI.tscn" type="PackedScene" id=5]
[ext_resource path="res://src/Projectiles/BulletManager.tscn" type="PackedScene" id=6]
[ext_resource path="res://src/Scripts/RoomManager/Observation.gd" type="Script" id=7]
[ext_resource path="res://src/Objects/Interactive/ObiliskSpawnPositions.tscn" type="PackedScene" id=8]
[ext_resource path="res://TriggerEvents/SceneTransition.tscn" type="PackedScene" id=9]
[ext_resource path="res://assets/environment/Objects/door_open.png" type="Texture" id=10]
[ext_resource path="res://assets/environment/Objects/door_closed.png" type="Texture" id=11]



[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){

	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;

	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);

	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);

	vec2 distort_sum = (distort1 + distort2) / 60.0;

	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, 0.0);

	color = mix(color, blue_tint, 0.3);
	color.rgb = mix(vec3(0.5), color.rgb, 1.4);

	float near_top = (UV.y + distort_sum.y) / (0.2 / sprite_scale.y);
	near_top = clamp(near_top, 0.0, 1.0);
	near_top = 1.0 - near_top;

	color = mix(color, vec4(1.0), near_top);

	float edge_lower = 0.6;
	float edge_upper = edge_lower + 0.1;

	if(near_top > edge_lower){
		color.a = 0.0;

		if(near_top < edge_upper){
			color.a = (edge_upper - near_top) / (edge_upper - edge_lower);
		}
	}

	COLOR = color;
} "

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/blue_tint = Color( 0.952941, 0.952941, 0.952941, 1 )
shader_param/sprite_scale = Vector2( 4, 2 )
shader_param/scale_x = 0.67

[sub_resource type="Shader" id=3]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){

	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;

	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);

	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);

	vec2 distort_sum = (distort1 + distort2) / 60.0;

	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, 0.0);

	color = mix(color, blue_tint, 0.3);
	color.rgb = mix(vec3(0.5), color.rgb, 1.4);

	float near_top = (UV.y + distort_sum.y) / (0.2 / sprite_scale.y);
	near_top = clamp(near_top, 0.0, 1.0);
	near_top = 1.0 - near_top;

	color = mix(color, vec4(1.0), near_top);

	float edge_lower = 0.6;
	float edge_upper = edge_lower + 0.1;

	if(near_top > edge_lower){
		color.a = 0.0;

		if(near_top < edge_upper){
			color.a = (edge_upper - near_top) / (edge_upper - edge_lower);
		}
	}

	COLOR = color;
} "

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/blue_tint = Color( 0.952941, 0.952941, 0.952941, 1 )
shader_param/sprite_scale = Vector2( 4, 2 )
shader_param/scale_x = 0.67

[node name="Observation" type="Node2D"]
script = ExtResource( 7 )

[node name="YSort" type="YSort" parent="."]

[node name="Node2D2" parent="YSort" instance=ExtResource( 4 )]
material = SubResource( 2 )
position = Vector2( -882.912, -3611.64 )
scale = Vector2( 0.907622, 0.0950787 )

[node name="Node2D" parent="YSort" instance=ExtResource( 4 )]
material = SubResource( 4 )
position = Vector2( 5332.45, -573.896 )

[node name="Environment" type="TileMap" parent="YSort"]
tile_set = ExtResource( 2 )
cell_size = Vector2( 256, 256 )
format = 1
tile_data = PoolIntArray( -917514, 1, 0, -917513, 1, 7, -917512, 1, 7, -917511, 1, 7, -917510, 1, 7, -917509, 1, 7, -917508, 1, 7, -917507, 1, 7, -917506, 1, 7, -917505, 1, 7, -983040, 1, 7, -983039, 1, 7, -983038, 1, 7, -983037, 1, 7, -983036, 1, 7, -983035, 1, 7, -983034, 1, 7, -983033, 1, 7, -983032, 1, 7, -983031, 1, 2, -851978, 1, 65536, -851977, 2, 0, -851976, 2, 1, -851975, 2, 1, -851974, 2, 1, -851973, 2, 1, -851972, 2, 1, -851971, 2, 1, -851970, 2, 1, -851969, 2, 1, -917504, 2, 1, -917503, 2, 1, -917502, 2, 1, -917501, 2, 1, -917500, 2, 1, -917499, 2, 1, -917498, 2, 1, -917497, 2, 1, -917496, 2, 2, -917495, 1, 65538, -786442, 1, 65536, -786441, 2, 131072, -786440, 2, 65537, -786439, 2, 65537, -786438, 2, 65537, -786437, 2, 65537, -786436, 2, 65537, -786435, 2, 65537, -786434, 2, 65537, -786433, 2, 65537, -851968, 2, 65537, -851967, 2, 65537, -851966, 2, 65537, -851965, 2, 65537, -851964, 2, 65537, -851963, 2, 65537, -851962, 2, 65537, -851961, 2, 65537, -851960, 2, 131074, -851959, 1, 65538, -720906, 1, 131072, -720905, 1, 196609, -720904, 2, 131072, -720903, 2, 131073, -720902, 2, 131073, -720901, 2, 131073, -720900, 2, 131073, -720899, 2, 131073, -720898, 2, 131073, -720897, 2, 65537, -786432, 2, 65537, -786431, 2, 131073, -786430, 2, 131073, -786429, 2, 131073, -786428, 2, 131073, -786427, 2, 131073, -786426, 2, 131073, -786425, 2, 131074, -786424, 1, 196608, -786423, 1, 131074, -655369, 1, 131072, -655368, 1, 131073, -655367, 1, 131073, -655366, 1, 131073, -655365, 1, 131073, -655364, 1, 131073, -655363, 1, 131073, -655362, 1, 196609, -655361, 2, 65536, -720896, 2, 65538, -720895, 1, 196608, -720894, 1, 131073, -720893, 1, 131073, -720892, 1, 131073, -720891, 1, 131073, -720890, 1, 131073, -720889, 1, 131073, -720888, 1, 131074, -589826, 1, 65536, -589825, 2, 65536, -655360, 2, 65538, -655359, 1, 65538, -524290, 1, 65536, -524289, 2, 65536, -589824, 2, 65538, -589823, 1, 65538, -458754, 1, 65536, -458753, 2, 65536, -524288, 2, 65538, -524287, 1, 65538, -524271, 1, 0, -524270, 1, 1, -524269, 1, 1, -524268, 1, 1, -524267, 1, 1, -524266, 1, 1, -524265, 1, 1, -524264, 1, 2, -393218, 1, 65536, -393217, 2, 65536, -458752, 2, 65538, -458751, 1, 65538, -458737, 1, 0, -458736, 1, 1, -458735, 1, 3, -458734, 2, 0, -458733, 2, 1, -458732, 2, 1, -458731, 2, 1, -458730, 2, 1, -458729, 2, 2, -458728, 1, 65538, -327682, 1, 65536, -327681, 2, 65536, -393216, 2, 65538, -393215, 1, 65538, -393204, 1, 0, -393203, 1, 1, -393202, 1, 1, -393201, 1, 3, -393200, 2, 0, -393199, 2, 1, -393198, 2, 65537, -393197, 2, 65537, -393196, 2, 65537, -393195, 2, 65537, -393194, 2, 65537, -393193, 2, 65538, -393192, 1, 65539, -393191, 1, 1, -393190, 1, 2, -262149, 1, 0, -262148, 1, 1, -262147, 1, 1, -262146, 1, 3, -262145, 2, 65536, -327680, 2, 65538, -327679, 1, 65539, -327678, 1, 1, -327677, 1, 1, -327676, 1, 2, -327669, 1, 0, -327668, 1, 3, -327667, 2, 0, -327666, 2, 1, -327665, 2, 1, -327664, 2, 65537, -327663, 2, 65537, -327662, 2, 65537, -327661, 2, 65537, -327660, 2, 65537, -327659, 2, 65537, -327658, 2, 65537, -327657, 2, 65537, -327656, 2, 1, -327655, 2, 2, -327654, 1, 65538, -196613, 1, 65536, -196612, 2, 0, -196611, 2, 1, -196610, 2, 1, -196609, 2, 65537, -262144, 2, 65537, -262143, 2, 1, -262142, 2, 1, -262141, 2, 2, -262140, 1, 65538, -262134, 1, 0, -262133, 1, 3, -262132, 2, 0, -262131, 2, 65537, -262130, 2, 65537, -262129, 2, 65537, -262128, 2, 65537, -262127, 2, 65537, -262126, 2, 65537, -262125, 2, 65537, -262124, 2, 65537, -262123, 2, 65537, -262122, 2, 65537, -262121, 2, 65537, -262120, 2, 65537, -262119, 2, 65538, -262118, 1, 65538, -131091, 1, 0, -131090, 1, 1, -131089, 1, 1, -131088, 1, 1, -131087, 1, 1, -131086, 1, 1, -131085, 1, 1, -131084, 1, 1, -131083, 1, 1, -131082, 1, 1, -131081, 1, 2, -131077, 1, 65536, -131076, 2, 65536, -131075, 2, 65537, -131074, 2, 65537, -131073, 2, 65537, -196608, 2, 65537, -196607, 2, 65537, -196606, 2, 65537, -196605, 2, 65538, -196604, 1, 65538, -196598, 1, 65536, -196597, 2, 0, -196596, 2, 65537, -196595, 2, 65537, -196594, 2, 65537, -196593, 2, 65537, -196592, 2, 65537, -196591, 2, 65537, -196590, 2, 65537, -196589, 2, 131073, -196588, 2, 131073, -196587, 2, 131073, -196586, 2, 65537, -196585, 2, 65537, -196584, 2, 65537, -196583, 2, 65538, -196582, 1, 65538, -65556, 1, 0, -65555, 1, 3, -65554, 2, 0, -65553, 2, 1, -65552, 2, 1, -65551, 2, 1, -65550, 2, 1, -65549, 2, 1, -65548, 2, 1, -65547, 2, 1, -65546, 2, 2, -65545, 1, 65539, -65544, 1, 1, -65543, 1, 1, -65542, 1, 1, -65541, 1, 3, -65540, 2, 65536, -65539, 2, 65537, -65538, 2, 65537, -65537, 2, 131073, -131072, 2, 131073, -131071, 2, 65537, -131070, 2, 65537, -131069, 2, 65538, -131068, 1, 65539, -131067, 1, 1, -131066, 1, 1, -131065, 1, 1, -131064, 1, 1, -131063, 1, 1, -131062, 1, 3, -131061, 2, 65536, -131060, 2, 65537, -131059, 2, 65537, -131058, 2, 65537, -131057, 2, 65537, -131056, 2, 131073, -131055, 2, 131073, -131054, 2, 131074, -131050, 2, 65536, -131049, 2, 65537, -131048, 2, 65537, -131047, 2, 65538, -131046, 1, 65538, -20, 1, 65536, -19, 2, 0, -18, 2, 65537, -17, 2, 65537, -16, 2, 65537, -15, 2, 65537, -14, 2, 65537, -13, 2, 65537, -12, 2, 65537, -11, 2, 65537, -10, 2, 65537, -9, 2, 1, -8, 2, 1, -7, 2, 1, -6, 2, 1, -5, 2, 1, -4, 2, 65537, -3, 2, 65537, -2, 2, 65538, -1, 1, 262150, -65536, 1, 196614, -65535, 2, 65536, -65534, 2, 65537, -65533, 2, 65537, -65532, 2, 1, -65531, 2, 1, -65530, 2, 1, -65529, 2, 1, -65528, 2, 1, -65527, 2, 1, -65526, 2, 1, -65525, 2, 65537, -65524, 2, 65537, -65523, 2, 65537, -65522, 2, 65537, -65521, 2, 65538, -65514, 2, 65536, -65513, 2, 65537, -65512, 2, 65537, -65511, 2, 65538, -65510, 1, 65538, 65516, 1, 65536, 65517, 2, 131072, 65518, 2, 131073, 65519, 2, 65537, 65520, 2, 65537, 65521, 2, 65537, 65522, 2, 131073, 65523, 2, 131073, 65524, 2, 131073, 65525, 2, 65537, 65526, 2, 65537, 65527, 2, 65537, 65528, 2, 65537, 65529, 2, 65537, 65530, 2, 65537, 65531, 2, 65537, 65532, 2, 65537, 65533, 2, 65537, 65534, 2, 65538, 65535, 1, 262144, 0, 1, 262145, 1, 2, 65536, 2, 2, 65537, 3, 2, 65537, 4, 2, 65537, 5, 2, 65537, 6, 2, 65537, 7, 2, 65537, 8, 2, 65537, 9, 2, 65537, 10, 2, 65537, 11, 2, 65537, 12, 2, 65537, 13, 2, 65537, 14, 2, 65537, 15, 2, 65538, 22, 2, 65536, 23, 2, 65537, 24, 2, 65537, 25, 2, 65538, 26, 1, 65538, 131052, 1, 131072, 131053, 1, 131073, 131054, 1, 196609, 131055, 2, 65536, 131056, 2, 65537, 131057, 2, 65538, 131058, 1, 196608, 131059, 1, 131073, 131060, 1, 196609, 131061, 2, 131072, 131062, 2, 131073, 131063, 2, 131073, 131064, 2, 131073, 131065, 2, 131073, 131066, 2, 131073, 131067, 2, 131073, 131068, 2, 65537, 131069, 2, 65537, 131070, 2, 65537, 131071, 2, 1, 65536, 2, 1, 65537, 2, 65537, 65538, 2, 65537, 65539, 2, 65537, 65540, 2, 131073, 65541, 2, 131073, 65542, 2, 131073, 65543, 2, 131073, 65544, 2, 131073, 65545, 2, 131073, 65546, 2, 131073, 65547, 2, 65537, 65548, 2, 65537, 65549, 2, 65537, 65550, 2, 65537, 65551, 2, 65538, 65558, 2, 131072, 65559, 2, 131073, 65560, 2, 65537, 65561, 2, 65538, 65562, 1, 65538, 196590, 1, 65536, 196591, 2, 65536, 196592, 2, 65537, 196593, 2, 65538, 196594, 1, 65538, 196596, 1, 131072, 196597, 1, 131073, 196598, 1, 131073, 196599, 1, 131073, 196600, 1, 131073, 196601, 1, 131073, 196602, 1, 131073, 196603, 1, 196609, 196604, 2, 65536, 196605, 2, 65537, 196606, 2, 65537, 196607, 2, 65537, 131072, 2, 65537, 131073, 2, 65537, 131074, 2, 65537, 131075, 2, 65538, 131076, 1, 196608, 131077, 1, 131073, 131078, 1, 131073, 131079, 1, 131073, 131080, 1, 131073, 131081, 1, 131073, 131082, 1, 196609, 131083, 2, 65536, 131084, 2, 65537, 131085, 2, 65537, 131086, 2, 65537, 131087, 2, 65537, 131088, 2, 1, 131089, 2, 2, 131096, 2, 131072, 131097, 2, 131074, 131098, 1, 65538, 262121, 1, 0, 262122, 1, 1, 262123, 1, 1, 262124, 1, 1, 262125, 1, 1, 262126, 1, 3, 262127, 2, 65536, 262128, 2, 65537, 262129, 2, 65538, 262130, 1, 65539, 262131, 1, 2, 262139, 1, 65536, 262140, 2, 131072, 262141, 2, 131073, 262142, 2, 131073, 262143, 2, 65537, 196608, 2, 65537, 196609, 2, 131073, 196610, 2, 131073, 196611, 2, 131074, 196612, 1, 65538, 196618, 1, 65536, 196619, 2, 65536, 196620, 2, 65537, 196621, 2, 65537, 196622, 2, 65537, 196623, 2, 65537, 196624, 2, 65537, 196625, 2, 65538, 327656, 1, 0, 327657, 1, 3, 327658, 2, 0, 327659, 2, 1, 327660, 2, 1, 327661, 2, 1, 327662, 2, 1, 327663, 2, 65537, 327664, 2, 65537, 327665, 2, 65537, 327666, 2, 2, 327667, 1, 65538, 327675, 1, 131072, 327676, 1, 131073, 327677, 1, 131073, 327678, 1, 196609, 327679, 2, 65536, 262144, 2, 65538, 262145, 1, 196608, 262146, 1, 131073, 262147, 1, 131073, 262148, 1, 131074, 262154, 1, 65536, 262155, 2, 131072, 262156, 2, 65537, 262157, 2, 65537, 262158, 2, 65537, 262159, 2, 65537, 262160, 2, 65537, 262161, 2, 65537, 262162, 2, 2, 393192, 1, 65536, 393193, 2, 0, 393194, 2, 65537, 393195, 2, 65537, 393196, 2, 65537, 393197, 2, 65537, 393198, 2, 65537, 393199, 2, 65537, 393200, 2, 65537, 393201, 2, 65537, 393202, 2, 131074, 393203, 1, 65538, 393214, 1, 65536, 393215, 2, 65536, 327680, 2, 65538, 327681, 1, 65538, 327690, 1, 131072, 327691, 1, 196609, 327692, 2, 65536, 327693, 2, 65537, 327694, 2, 65537, 327695, 2, 65537, 327696, 2, 65537, 327697, 2, 65537, 327698, 2, 65537, 327699, 2, 1, 327700, 2, 2, 458729, 2, 65536, 458730, 2, 65537, 458731, 2, 65537, 458732, 2, 65537, 458733, 2, 65537, 458734, 2, 65537, 458735, 2, 65537, 458736, 2, 65537, 458737, 2, 65538, 458738, 1, 196608, 458739, 1, 131074, 458750, 1, 65536, 458751, 2, 65536, 393216, 2, 65538, 393217, 1, 65538, 393227, 1, 65536, 393228, 2, 131072, 393229, 2, 131073, 393230, 2, 131073, 393231, 2, 65537, 393232, 2, 65537, 393233, 2, 65537, 393234, 2, 65537, 393235, 2, 65537, 393236, 2, 65538, 524264, 1, 65536, 524265, 2, 131072, 524266, 2, 65537, 524267, 2, 65537, 524268, 2, 65537, 524269, 2, 65537, 524270, 2, 65537, 524271, 2, 65537, 524272, 2, 65537, 524273, 2, 65538, 524274, 1, 65538, 524286, 1, 65536, 524287, 2, 65536, 458752, 2, 65538, 458753, 1, 65538, 458763, 1, 131072, 458764, 1, 131073, 458765, 1, 131073, 458766, 1, 196609, 458767, 2, 65536, 458768, 2, 65537, 458769, 2, 65537, 458770, 2, 65537, 458771, 2, 65537, 458772, 2, 65537, 458773, 2, 1, 458774, 2, 2, 589800, 1, 131072, 589801, 1, 196609, 589802, 2, 131072, 589803, 2, 131073, 589804, 2, 131073, 589805, 2, 131073, 589806, 2, 131073, 589807, 2, 131073, 589808, 2, 131073, 589809, 2, 131074, 589810, 1, 65538, 589822, 1, 65536, 589823, 2, 65536, 524288, 2, 65538, 524289, 1, 65538, 524302, 1, 65536, 524303, 2, 131072, 524304, 2, 131073, 524305, 2, 65537, 524306, 2, 65537, 524307, 2, 65537, 524308, 2, 65537, 524309, 2, 65537, 524310, 2, 65538, 655337, 1, 131072, 655338, 1, 131073, 655339, 1, 131073, 655340, 1, 131073, 655341, 1, 131073, 655342, 1, 131073, 655343, 1, 131073, 655344, 1, 131073, 655345, 1, 131073, 655346, 1, 131074, 655356, 1, 0, 655357, 1, 1, 655358, 1, 3, 655359, 2, 65536, 589824, 2, 65538, 589825, 1, 65539, 589826, 1, 1, 589827, 1, 1, 589828, 1, 1, 589829, 1, 1, 589830, 1, 1, 589831, 1, 1, 589832, 1, 1, 589833, 1, 2, 589838, 1, 131072, 589839, 1, 131073, 589840, 1, 196609, 589841, 2, 131072, 589842, 2, 131073, 589843, 2, 131073, 589844, 2, 131073, 589845, 2, 131073, 589846, 2, 131074, 720886, 1, 0, 720887, 1, 1, 720888, 1, 1, 720889, 1, 1, 720890, 1, 1, 720891, 1, 1, 720892, 1, 3, 720893, 2, 0, 720894, 2, 1, 720895, 2, 65537, 655360, 2, 65537, 655361, 2, 1, 655362, 2, 1, 655363, 2, 1, 655364, 2, 1, 655365, 2, 1, 655366, 2, 1, 655367, 2, 1, 655368, 2, 2, 655369, 1, 65538, 655376, 1, 131072, 655377, 1, 131073, 655378, 1, 131073, 655379, 1, 131073, 655380, 1, 131073, 655381, 1, 131073, 655382, 1, 131073, 786422, 1, 65536, 786423, 2, 0, 786424, 2, 1, 786425, 2, 1, 786426, 2, 1, 786427, 2, 1, 786428, 2, 1, 786429, 2, 65537, 786430, 2, 65537, 786431, 2, 65537, 720896, 2, 65537, 720897, 2, 65537, 720898, 2, 65537, 720899, 2, 65537, 720900, 2, 65537, 720901, 2, 65537, 720902, 2, 65537, 720903, 2, 65537, 720904, 2, 65538, 720905, 1, 65538, 851958, 1, 65536, 851959, 2, 65536, 851960, 2, 65537, 851961, 2, 65537, 851962, 2, 65537, 851963, 2, 65537, 851964, 2, 65537, 851965, 2, 65537, 851966, 2, 65537, 851967, 2, 65537, 786432, 2, 65537, 786433, 2, 65537, 786434, 2, 65537, 786435, 2, 65537, 786436, 2, 65537, 786437, 2, 65537, 786438, 2, 65537, 786439, 2, 65537, 786440, 2, 65538, 786441, 1, 65538, 917494, 1, 65536, 917495, 2, 65536, 917496, 2, 65537, 917497, 2, 65537, 917498, 2, 65537, 917499, 2, 65537, 917500, 2, 65537, 917501, 2, 65537, 917502, 2, 65537, 917503, 2, 65537, 851968, 2, 65537, 851969, 2, 65537, 851970, 2, 65537, 851971, 2, 65537, 851972, 2, 65537, 851973, 2, 65537, 851974, 2, 65537, 851975, 2, 65537, 851976, 2, 65538, 851977, 1, 65538, 983030, 1, 65536, 983031, 2, 65536, 983032, 2, 65537, 983033, 2, 65537, 983034, 2, 65537, 983035, 2, 65537, 983036, 2, 65537, 983037, 2, 65537, 983038, 2, 65537, 983039, 2, 65537, 917504, 2, 65537, 917505, 2, 65537, 917506, 2, 65537, 917507, 2, 65537, 917508, 2, 65537, 917509, 2, 65537, 917510, 2, 65537, 917511, 2, 65537, 917512, 2, 65538, 917513, 1, 65538, 1048566, 1, 65536, 1048567, 2, 65536, 1048568, 2, 65537, 1048569, 2, 65537, 1048570, 2, 65537, 1048571, 2, 65537, 1048572, 2, 65537, 1048573, 2, 65537, 1048574, 2, 65537, 1048575, 2, 65537, 983040, 2, 65537, 983041, 2, 65537, 983042, 2, 65537, 983043, 2, 65537, 983044, 2, 65537, 983045, 2, 65537, 983046, 2, 65537, 983047, 2, 65537, 983048, 2, 65538, 983049, 1, 65538, 1114102, 1, 65536, 1114103, 2, 65536, 1114104, 2, 65537, 1114105, 2, 65537, 1114106, 2, 65537, 1114107, 2, 65537, 1114108, 2, 65537, 1114109, 2, 65537, 1114110, 2, 65537, 1114111, 2, 65537, 1048576, 2, 65537, 1048577, 2, 65537, 1048578, 2, 65537, 1048579, 2, 65537, 1048580, 2, 65537, 1048581, 2, 65537, 1048582, 2, 65537, 1048583, 2, 65537, 1048584, 2, 65538, 1048585, 1, 65538, 1179638, 1, 65536, 1179639, 2, 65536, 1179640, 2, 65537, 1179641, 2, 65537, 1179642, 2, 65537, 1179643, 2, 65537, 1179644, 2, 65537, 1179645, 2, 65537, 1179646, 2, 65537, 1179647, 2, 65537, 1114112, 2, 65537, 1114113, 2, 65537, 1114114, 2, 65537, 1114115, 2, 65537, 1114116, 2, 65537, 1114117, 2, 65537, 1114118, 2, 65537, 1114119, 2, 65537, 1114120, 2, 65538, 1114121, 1, 65538, 1245174, 1, 65536, 1245175, 2, 65536, 1245176, 2, 65537, 1245177, 2, 65537, 1245178, 2, 65537, 1245179, 2, 65537, 1245180, 2, 65537, 1245181, 2, 65537, 1245182, 2, 65537, 1245183, 2, 65537, 1179648, 2, 65537, 1179649, 2, 65537, 1179650, 2, 65537, 1179651, 2, 65537, 1179652, 2, 65537, 1179653, 2, 65537, 1179654, 2, 65537, 1179655, 2, 65537, 1179656, 2, 65538, 1310710, 1, 65536, 1310711, 2, 131072, 1310712, 2, 131073, 1310713, 2, 131073, 1310714, 2, 131073, 1310715, 2, 131073, 1310716, 2, 131073, 1310717, 2, 65537, 1310718, 2, 65537, 1310719, 2, 65537, 1245184, 2, 65537, 1245185, 2, 65537, 1245186, 2, 65537, 1245187, 2, 65537, 1245188, 2, 65537, 1245189, 2, 65537, 1245190, 2, 65537, 1245191, 2, 65537, 1245192, 2, 65538, 1245193, 1, 65538, 1376246, 1, 131072, 1376247, 1, 131073, 1376248, 1, 131073, 1376249, 1, 131073, 1376250, 1, 131073, 1376251, 1, 131073, 1376252, 1, 196609, 1376253, 2, 131072, 1376254, 2, 131073, 1376255, 2, 131073, 1310720, 2, 131073, 1310721, 2, 131073, 1310722, 2, 131073, 1310723, 2, 131073, 1310724, 2, 131073, 1310725, 2, 131073, 1310726, 2, 131073, 1310727, 2, 131073, 1310728, 2, 131074, 1310729, 1, 65538, 1441788, 1, 131072, 1441789, 1, 131073, 1441790, 1, 131073, 1441791, 1, 131073, 1376256, 1, 131073, 1376257, 1, 131073, 1376258, 1, 131073, 1376259, 1, 131073, 1376260, 1, 131073, 1376261, 1, 131073, 1376262, 1, 131073, 1376263, 1, 131073, 1376264, 1, 131073, 1376265, 1, 131074 )

[node name="Props" type="TileMap" parent="YSort"]
tile_set = ExtResource( 1 )
cell_size = Vector2( 256, 256 )
format = 1
tile_data = PoolIntArray( -851974, 6, 0, -786440, 3, 2, -851961, 3, 2, -720898, 0, 1, -786431, 0, 2, -786427, 6, 0, -589825, 5, 0, -524289, 5, 0, -589824, 5, 0, -262147, 6, 0, -262146, 1, 0, -327679, 1, 0, -327678, 6, 0, -327657, 0, 2, -196612, 6, 0, -131076, 9, 0, -196597, 5, 0, -196596, 5, 0, -65554, 0, 1, -65540, 0, 0, -131071, 4, 0, -131061, 0, 0, -131060, 5, 0, -19, 6, 0, -65520, 9, 0, -65519, 9, 0, -65518, 9, 0, -65517, 9, 0, -65516, 9, 0, 65521, 5, 0, 65522, 5, 0, 65523, 5, 0, 65524, 0, 0, 16, 9, 0, 17, 9, 0, 19, 9, 0, 20, 9, 0, 24, 3, 2, 65553, 9, 0, 65554, 9, 0, 65555, 9, 0, 131073, 9, 0, 131074, 6, 0, 131083, 0, 1, 131091, 9, 0, 131092, 9, 0, 262127, 5, 0, 262142, 0, 0, 196624, 4, 0, 196633, 3, 0, 327663, 5, 0, 327666, 0, 1, 262161, 4, 0, 262169, 3, 0, 393193, 0, 0, 393201, 6, 0, 327705, 3, 0, 393240, 3, 0, 393241, 3, 0, 524265, 0, 0, 458775, 3, 0, 458776, 3, 0, 524309, 3, 2, 524311, 3, 0, 655357, 7, 0, 655358, 1, 0, 589825, 7, 0, 589826, 1, 1, 589827, 7, 0, 589828, 1, 1, 589829, 1, 0, 589830, 7, 0, 589831, 1, 1, 589832, 7, 0, 589847, 3, 0, 720899, 6, 0, 720901, 5, 0, 851960, 3, 2, 851963, 5, 0, 851964, 5, 0, 786436, 5, 0, 917496, 5, 0, 917497, 5, 0, 917500, 5, 0, 983032, 5, 0, 983033, 5, 0, 983034, 5, 0, 983035, 5, 0, 983036, 5, 0, 1048568, 5, 0, 1048570, 5, 0, 1048571, 5, 0, 1114103, 5, 0, 1114104, 5, 0, 1114105, 5, 0, 1114106, 5, 0, 1179641, 5, 0, 1179642, 5, 0, 1114120, 0, 2, 1245192, 0, 1 )

[node name="Inner Walls" type="TileMap" parent="YSort"]
tile_set = ExtResource( 2 )
cell_size = Vector2( 256, 256 )
format = 1
tile_data = PoolIntArray( 720892, 1, 1, 720893, 1, 2, 786429, 1, 65538, 851965, 1, 65538, 917501, 1, 65538, 983037, 1, 65538, 1048573, 1, 65538, 1114109, 1, 65538, 1245181, 1, 65538, 1310717, 1, 65538, 1376252, 1, 131073, 1376253, 1, 131074 )

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 2045.52, 4721.96 )

[node name="BulletManager" parent="." instance=ExtResource( 6 )]

[node name="UI" parent="." instance=ExtResource( 5 )]

[node name="ObiliskSpawnPositions" parent="." instance=ExtResource( 8 )]

[node name="TransitionBossRoom" parent="." instance=ExtResource( 9 )]
position = Vector2( -6092.5, 1676.67 )
scene_path = "res://src/Levels/Boss room.tscn"

[node name="door_close_boosroom" type="Sprite" parent="TransitionBossRoom"]
position = Vector2( 563.363, 0 )
texture = ExtResource( 11 )

[node name="door_open_boosroom" type="Sprite" parent="TransitionBossRoom/door_close_boosroom"]
visible = false
texture = ExtResource( 10 )

[node name="TransitionMaze" parent="." instance=ExtResource( 9 )]
position = Vector2( 2135.52, 4739.03 )
scene_path = ""

[node name="door_close_maze" type="Sprite" parent="TransitionMaze"]
position = Vector2( -186.17, -16.9707 )
rotation = -3.14159
texture = ExtResource( 11 )

[node name="door_open_maze" type="Sprite" parent="TransitionMaze/door_close_maze"]
visible = false
rotation = -3.14159
texture = ExtResource( 10 )

[editable path="ObiliskSpawnPositions"]
